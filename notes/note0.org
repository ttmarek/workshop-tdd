* SITES
 - https://github.com/ttmarek/workshop-tdd
 - https://github.com/mikec/sazerac
 - https://vocajs.com
 - http://deckofcardsapi.com
 - https://github.com/node-nock/nock

* WHITEBOARD
** A GOOD TEST...
 - is simple (don't write tests that need tests)
 - is singular in purpose (test one behaviour/path/thing at a time, and only test it once)
 - is isolated (don't share state between tests)
 - is blind (test behaviour, not implementation)

* Topics
  - (skill) you can write and implement tests using Jest
  - (skill) you can write well-structured tests (3A's)
  - (knowledge) you know what a unit test is
  - (knowledge) you know what an integration is
  - (wisdom) you understand when an integration test is better than a unit test
  - (wisdom) you understand why it is better to test one thing at a time
  - (skill) you can break down a user story with AC into tests

* Objective
 - Get a feel for testing and TDD



- we learned how to write and run tests using Jest (means you know Jasmine too).
- we built unit tests using the 3As (Arrange, Act, Assert).
- we learned that a bug is test case that hasn't been written yet.
- we practiced TDD flow: test, watch it fail, make it pass, refactor?

- we practiced breaking AC and TR into tests
- we practiced

* Payment Form
 - Instructor: explain user story and acceptance criteria.
 - Instructor (you type): type out TR1 expected data transform
 - Instructor (you type): write test for TR1
 - Instructor (you type): run TR1 test, and watch fail
 - Instructor: make test pass, send completed code in Slack
 - Instructor (you type): fill in blanks for TR2.
 - Instructor (you type): write test for TR2.
 - Instructor (you type): run TR2 test, and watch fail
 - Students: fill in blanks for TR3, AC1, AC2
 - Students: get into groups write tests for TR3, AC1, and AC2 on the board
 - Students: type tests into computer
 - Instructor (you type): run tests, and watch fail
 - Instructor: make test pass, send completed code in Slack
 - Students: fill in blanks for AC3.1, AC3.2, AC3.3, AC3.4
 - Students: write tests for AC3.1, AC3.2. AC3.3, AC3.4
 - Instructor (you type): run tests, and watch fail
